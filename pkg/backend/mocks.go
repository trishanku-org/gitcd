// Code generated by MockGen. DO NOT EDIT.
// Source: watch.go

// Package backend is a generated GoMock package.
package backend

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	etcdserverpb "go.etcd.io/etcd/api/v3/etcdserverpb"
	mvccpb "go.etcd.io/etcd/api/v3/mvccpb"
)

// Mockwatch is a mock of watch interface.
type Mockwatch struct {
	ctrl     *gomock.Controller
	recorder *MockwatchMockRecorder
}

// MockwatchMockRecorder is the mock recorder for Mockwatch.
type MockwatchMockRecorder struct {
	mock *Mockwatch
}

// NewMockwatch creates a new mock instance.
func NewMockwatch(ctrl *gomock.Controller) *Mockwatch {
	mock := &Mockwatch{ctrl: ctrl}
	mock.recorder = &MockwatchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockwatch) EXPECT() *MockwatchMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *Mockwatch) Cancel(arg0 *etcdserverpb.ResponseHeader, arg1 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel.
func (mr *MockwatchMockRecorder) Cancel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*Mockwatch)(nil).Cancel), arg0, arg1)
}

// Context mocks base method.
func (m *Mockwatch) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockwatchMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*Mockwatch)(nil).Context))
}

// FilterAndSend mocks base method.
func (m *Mockwatch) FilterAndSend(arg0 *etcdserverpb.ResponseHeader, arg1 []*mvccpb.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterAndSend", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FilterAndSend indicates an expected call of FilterAndSend.
func (mr *MockwatchMockRecorder) FilterAndSend(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterAndSend", reflect.TypeOf((*Mockwatch)(nil).FilterAndSend), arg0, arg1)
}

// Fragment mocks base method.
func (m *Mockwatch) Fragment() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fragment")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Fragment indicates an expected call of Fragment.
func (mr *MockwatchMockRecorder) Fragment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fragment", reflect.TypeOf((*Mockwatch)(nil).Fragment))
}

// PrevKv mocks base method.
func (m *Mockwatch) PrevKv() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrevKv")
	ret0, _ := ret[0].(bool)
	return ret0
}

// PrevKv indicates an expected call of PrevKv.
func (mr *MockwatchMockRecorder) PrevKv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrevKv", reflect.TypeOf((*Mockwatch)(nil).PrevKv))
}

// ProgressNotify mocks base method.
func (m *Mockwatch) ProgressNotify() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProgressNotify")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ProgressNotify indicates an expected call of ProgressNotify.
func (mr *MockwatchMockRecorder) ProgressNotify() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProgressNotify", reflect.TypeOf((*Mockwatch)(nil).ProgressNotify))
}

// WatchId mocks base method.
func (m *Mockwatch) WatchId() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchId")
	ret0, _ := ret[0].(int64)
	return ret0
}

// WatchId indicates an expected call of WatchId.
func (mr *MockwatchMockRecorder) WatchId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchId", reflect.TypeOf((*Mockwatch)(nil).WatchId))
}
